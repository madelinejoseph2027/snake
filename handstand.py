#Importsimport numpy as npimport pybullet as pimport pyrosim.pyrosim as pyrosimimport constants as cimport randomimport osimport timeclass HANDSTAND:    def __init__(self, nextAvailableID):        self.myID = nextAvailableID        self.weights = np.random.rand(c.numSensorNeurons,c.numMotorNeurons)        self.weights = 2*self.weights - 1        def Create_World(self):        pyrosim.Start_SDF("world.sdf")        #pyrosim.Send_Cube(name="Box", pos=[-3,-3,0.5] , size=[1,1,1])        pyrosim.End()    def Create_Body(self):        pyrosim.Start_URDF("body.urdf")                pyrosim.Send_Cube(name="Torso", pos=[0,0,1] , size=[2,0.5,0.5])                        #Head        pyrosim.Send_Joint(name = "Torso_Head" , parent= "Torso" , child = "Head" , type = "revolute", position = [1,0,1.25], jointAxis = "0 1 0")        pyrosim.Send_Cube(name="Head", pos=[0.25,0,0.25] , size=[0.5,0.5,0.5])                #Front Right        pyrosim.Send_Joint(name = "Torso_FrontRight" , parent= "Torso" , child = "FrontRight" , type = "revolute", position = [1,-0.25,0.75], jointAxis = "0 1 0")        pyrosim.Send_Cube(name="FrontRight", pos=[0,0,-0.375] , size=[0.125,0.125,0.75])                pyrosim.Send_Joint(name = "FrontRight_FrontLowerRight" , parent= "FrontRight" , child = "FrontLowerRight" , type = "revolute", position = [0,0,-0.75], jointAxis = "0 1 0")        pyrosim.Send_Cube(name="FrontLowerRight", pos=[0,0,-0.125] , size=[0.25,0.25,0.25])                #Back Right        pyrosim.Send_Joint(name = "Torso_BackRight" , parent= "Torso" , child = "BackRight" , type = "revolute", position = [-1,-0.25,0.75], jointAxis = "0 1 0")        pyrosim.Send_Cube(name="BackRight", pos=[0,0,-0.25] , size=[0.125,0.125,0.5])                pyrosim.Send_Joint(name = "BackRight_BackLowerRight" , parent= "BackRight" , child = "BackLowerRight" , type = "revolute", position = [0,0,-0.5], jointAxis = "0 1 0")        pyrosim.Send_Cube(name="BackLowerRight", pos=[0,0,-0.25] , size=[0.125,0.125,0.5])                        #Front Left        pyrosim.Send_Joint(name = "Torso_FrontLeft" , parent= "Torso" , child = "FrontLeft" , type = "revolute", position = [1,0.25,0.75], jointAxis = "0 1 0")        pyrosim.Send_Cube(name="FrontLeft", pos=[0,0,-0.375] , size=[0.125,0.125,0.75])                pyrosim.Send_Joint(name = "FrontLeft_FrontLowerLeft" , parent= "FrontLeft" , child = "FrontLowerLeft" , type = "revolute", position = [0,0,-0.75], jointAxis = "0 1 0")        pyrosim.Send_Cube(name="FrontLowerLeft", pos=[0,0,-0.125] , size=[0.25,0.25,0.25])                #Back Left        pyrosim.Send_Joint(name = "Torso_BackLeft" , parent= "Torso" , child = "BackLeft" , type = "revolute", position = [-1,0.25,0.75], jointAxis = "0 1 0")        pyrosim.Send_Cube(name="BackLeft", pos=[0,0,-0.25] , size=[0.125,0.125,0.5])                pyrosim.Send_Joint(name = "BackLeft_BackLowerLeft" , parent= "BackLeft" , child = "BackLowerLeft" , type = "revolute", position = [0,0,-0.5], jointAxis = "0 1 0")        pyrosim.Send_Cube(name="BackLowerLeft", pos=[0,0,-0.25] , size=[0.125,0.125,0.5])                pyrosim.End()        def Create_Brain(self):        pyrosim.Start_NeuralNetwork("brain" + str(self.myID) + ".nndf")            pyrosim.Send_Sensor_Neuron(name = 0, linkName = "BackLowerRight")        pyrosim.Send_Sensor_Neuron(name = 1, linkName = "FrontLowerRight")        pyrosim.Send_Sensor_Neuron(name = 2, linkName = "BackLowerLeft")        pyrosim.Send_Sensor_Neuron(name = 3, linkName = "FrontLowerLeft")        pyrosim.Send_Motor_Neuron(name = 4, jointName = "Torso_BackRight")        pyrosim.Send_Motor_Neuron(name = 5, jointName = "Torso_FrontRight")        pyrosim.Send_Motor_Neuron(name = 6, jointName = "Torso_BackLeft")        pyrosim.Send_Motor_Neuron(name = 7, jointName = "Torso_FrontLeft")        pyrosim.Send_Motor_Neuron(name = 8, jointName = "BackRight_BackLowerRight")        pyrosim.Send_Motor_Neuron(name = 9, jointName = "FrontRight_FrontLowerRight")        pyrosim.Send_Motor_Neuron(name = 10, jointName = "BackLeft_BackLowerLeft")        pyrosim.Send_Motor_Neuron(name = 11, jointName = "FrontLeft_FrontLowerLeft")            for currentRow in range(c.numSensorNeurons):            for currentColumn in range(c.numMotorNeurons):                pyrosim.Send_Synapse(sourceNeuronName = currentRow, targetNeuronName = currentColumn+c.numSensorNeurons, weight = self.weights[currentRow][currentColumn])        pyrosim.End()            def Start_Simulation(self, directOrGUI):        self.Create_World()        self.Create_Body()        self.Create_Brain()                os.system("python3 simulate.py " + str(directOrGUI) + " " + str(self.myID) + " 2&>1 &")            def Wait_For_Simulation_To_End(self, directOrGUI):        while not os.path.exists("fitness" + str(self.myID) + ".txt"):            time.sleep(0.1)                f = open("fitness" + str(self.myID) + ".txt", "r")        fitnessString = f.readline()        self.fitness = float(fitnessString)        f.close()                        os.system("rm " + "fitness" + str(self.myID) + ".txt")            def Mutate(self):        randomRow = random.randint(0,2)        randomColumn = random.randint(0,1)        self.weights[randomRow,randomColumn] = 2*random.random() - 1    def Set_ID(self, newID):        self.myID = newID